package com.exploit.exploitelinjection;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.StandardELContext;
import javax.el.ValueExpression;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspFactory;
import javax.servlet.jsp.PageContext;
import java.io.IOException;
import java.lang.String;

@WebServlet("/exploit")
public class VulnerableServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String input = request.getParameter("input");

        // 创建 EL 解析环境
        ExpressionFactory expressionFactory = ExpressionFactory.newInstance();
        ELContext elContext = new StandardELContext(expressionFactory);

        // 解析 EL 表达式
        ValueExpression expression = expressionFactory.createValueExpression(elContext, input, String.class);
        String evaluatedInput = (String) expression.getValue(elContext);

        // 传递解析后的值到 JSP
        request.setAttribute("userInput", evaluatedInput);

        RequestDispatcher dispatcher = request.getRequestDispatcher("exploit.jsp");
        dispatcher.forward(request, response);
    }
}